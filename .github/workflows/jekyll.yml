name: Deploy Jekyll site to Pages

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["publish"]
    types:
      -completed

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
      - name: Copy documentation to gh-pages
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

          git fetch origin
          git checkout origin/1.20.1/create6 -- src/main/resources/assets/oc2rcreate/doc/en_us/
          
          rsync -a src/main/resources/assets/oc2rcreate/doc/en_us/ ./. --remove-source-files
          cp -f ./create.md ./index.md
          rm ./create.md
      - name: Add configuration to documents
        run: |
          find . -name "*.md" -exec bash -c '
            file="$1"
            echo "Processing $file..."
          
            title=$(grep -m 1 "^#[^#]" "$file")
            title="${title:2}"
          
            permalink="/${file#./}"
            permalink="${permalink%.md}"

            temp_file="$file.processing"
            in_code_example=false

           while IFS= read -r line || [[ -n "$line" ]]; do
              # Skip empty lines but preserve them
              if [ -z "$line" ]; then
                echo "$line"
                continue
              fi
              
              # Check for "This is an example" section start
              if echo "$line" | grep -q "This is an example"; then
                echo "$line"
                in_code_example=true
                continue
              fi
              
              # Check for API section (ends code example)
              if [ "$line" = "## API" ]; then
                in_code_example=false
                echo "$line"
                continue
              fi
              
              # If we are in a code example section
              if [ "$in_code_example" = true ]; then
                # Convert lines that are entirely wrapped in * to code blocks
                if echo "$line" | grep -q "^\*.*\*$"; then
                  code_content=$(echo "$line" | sed "s/^\*\(.*\)\*$/\1/")
                  echo "\`\`\`lua"
                  echo "$code_content"
                  echo "\`\`\`"
                  continue
                fi
              fi
              
              # Handle device names (like "Device name: *redstone_link*")
              if echo "$line" | grep -q "Device name:"; then
                echo "$line" | sed "s/\*\([^*]*\)\*/\`\1\`/g"
                continue
              fi
              
              # Handle method signatures (lines starting with *)
              if echo "$line" | grep -q "^\*[a-zA-Z]"; then
                echo "$line" | sed "s/^\*\(.*\)\*$/\`\1\`/"
                continue
              fi
              
              # Handle inline code in bullet points and descriptions
              if echo "$line" | grep -q "^- "; then
                echo "$line" | sed "s/\*\([^*]*\)\*/\`\1\`/g"
                continue
              fi
              
              # Handle any remaining *text* patterns as inline code
              if echo "$line" | grep -q "\*.*\*"; then
                echo "$line" | sed "s/\*\([^*]*\)\*/\`\1\`/g"
                continue
              fi
              
              # Regular line, output as-is
              echo "$line"
            done < "$file" > "$temp_file"
            
            {
              echo "---"
              echo "layout: default"
              echo "permalink: $permalink"
              echo "title: \"$title\""
              echo "---"
              echo ""
              cat "$temp_file"
            } > "$file.tmp"
            mv "$file.tmp" "$file"
            rm "$temp_file"
          ' _ {} \;
          find . -name "*.md" -exec sed -i 's/(\([^)]*\)\.md)/(\1)/g' {} \;
      - name: Setup Ruby
        # https://github.com/ruby/setup-ruby/releases/tag/v1.207.0
        uses: ruby/setup-ruby@4a9ddd6f338a97768b8006bf671dfbad383215f4
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
