package io.github.techtastic.oc2rcreate.device.block.creative_motor;

import com.simibubi.create.content.kinetics.motor.CreativeMotorBlockEntity;
import com.simibubi.create.content.kinetics.motor.KineticScrollValueBehaviour;
import com.simibubi.create.content.logistics.packager.PackagerBlockEntity;
import io.github.techtastic.oc2rcreate.device.block.AbstractBlockRPCDevice;
import li.cil.oc2.api.bus.device.object.Callback;
import li.cil.oc2.api.bus.device.object.DocumentedDevice;
import li.cil.oc2.api.bus.device.object.Parameter;
import org.jetbrains.annotations.NotNull;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class CreativeMotorDevice extends AbstractBlockRPCDevice implements DocumentedDevice {
    private final CreativeMotorBlockEntity motor;

    public CreativeMotorDevice(CreativeMotorBlockEntity motor) {
        super("creative_motor");
        this.motor = motor;
    }

    @Callback
    public final int getGeneratedSpeed() {
        return (int) this.motor.getGeneratedSpeed();
    }

    @Callback
    public final void setGeneratedSpeed(@Parameter("speed") int speed) throws NoSuchFieldException, IllegalAccessException {
        Class<CreativeMotorBlockEntity> clazz = CreativeMotorBlockEntity.class;
        Field field = clazz.getDeclaredField("generatedSpeed");
        field.setAccessible(true);
        ((KineticScrollValueBehaviour) field.get(this.motor)).setValue(speed);
    }

    @Override
    public void getDeviceDocumentation(@NotNull DeviceVisitor deviceVisitor) {
        deviceVisitor.visitCallback("getGeneratedSpeed").description("Gets the speed generated by the motor");
        deviceVisitor.visitCallback("setGeneratedSpeed").description("Sets the speed generated by the motor");
    }
}
